# Import necessary modules and libraries
from tkinter import Tk, Entry, Text, END, font, Label, Button, WORD  # Include WORD here
import sqlite3
from tkinter.messagebox import showinfo, askyesno
from datetime import datetime
import csv


# Create the main application window
app = Tk()
app.title('Student Records')
app.geometry('600x600')

# Create a custom font with your desired size and other attribute
custom_font = font.nametofont("TkDefaultFont")  # Start with the default font
custom_font.configure(size=18)  # Set the desired font size

# Set the custom font as the default font for the application
app.option_add("*Font", custom_font)

# Connect to the SQLite database and create a cursor
conn = sqlite3.connect('records.db')
cursor = conn.cursor()

# Create a 'students' table in the database if it doesn't exist
cursor.execute('''CREATE TABLE IF NOT EXISTS students (pantherid TEXT PRIMARY KEY, name TEXT, email TEXT)''')
conn.commit()

# Create and place labels for PantherID, Name, and Email
pantherid_label = Label(master=app, text='PantherID')
pantherid_label.grid(row=0, column=0)
name_label = Label(master=app, text='Name')
name_label.grid(row=1, column=0)
email_label = Label(master=app, text='Email')
email_label.grid(row=2, column=0)

# Create and place entry widgets for PantherID, Name, and Email
pantherid_entry = Entry(master=app)
pantherid_entry.grid(row=0, column=1)
name_entry = Entry(master=app)
name_entry.grid(row=1, column=1)
email_entry = Entry(master=app)
email_entry.grid(row=2, column=1)


# Define a function to handle adding a student record
def on_add_student_button_clicked():
    # Step-1: Obtain info from entry widgets
    pantherid = pantherid_entry.get()  # Don't convert to int
    name = name_entry.get()
    email = email_entry.get()

    # Insert these info into the database
    cursor.execute('INSERT INTO Students (PantherID, Name, Email) VALUES (?,?,?)', (pantherid, name, email))
    conn.commit()


    # Clear the entry fields
    pantherid_entry.delete(0, END)
    name_entry.delete(0, END)
    email_entry.delete(0, END)

    # Show an information message
    showinfo(message='Student record added to the database...')


# Create and place the Text widget for displaying records
txt = Text(master=app, wrap=WORD, width=40, height=10)
txt.grid(row=5, column=0, columnspan=3, pady=10)

# Define a function to list student records
def on_list_student_button_clicked():
    # Access the global variable txt
    global txt

    # Retrieve all records from the 'students' table
    cursor.execute('SELECT * FROM Students')
    records = cursor.fetchall()

    # Clear the Text widget
    txt.delete(0.0, END)

    # Display the records in the Text widget
    timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    txt.insert(END, f'--- Student list as of {timestamp} ---\n')
    for record in records:
        # Format PantherID with leading zeros
        txt.insert(END, f"PantherID: {record[0]:09}   Name: {record[1]}   Email: {record[2]}\n")

# Define a function to search for a student record
def search_record():
    pantherid = pantherid_entry.get()
    if pantherid:
        try:
            # Attempt to retrieve the record from the database
            cursor.execute('SELECT * FROM Students WHERE PantherID = ?', (pantherid,))
            record = cursor.fetchone()
            if record:
                # Display the record in the Text widget
                txt.delete(0.0, END)
                # Format PantherID with leading zeros
                txt.insert(END, f"PantherID: {record[0]:09}   Name: {record[1]}   Email: {record[2]}\n")
            else:
                # Display a message if no record is found
                showinfo(message=f'No record was found for {pantherid}')
        except ValueError:
            # Display a message for invalid PantherID
            showinfo(message='Please enter a valid PantherID')
    else:
        # Display a message if PantherID is not entered
        showinfo(message='Please enter a PantherID to search for a record')

# Define a function to update a student record
def update_record():
    pantherid = pantherid_entry.get()
    name = name_entry.get()
    email = email_entry.get()

    if pantherid and name and email:
        try:
            # Attempt to update the record in the database
            cursor.execute('UPDATE Students SET Name=?, Email=? WHERE PantherID=?', (name, email, pantherid))
            conn.commit()

            # Clear the entry fields
            pantherid_entry.delete(0, END)
            name_entry.delete(0, END)
            email_entry.delete(0, END)

            # Show a success message
            showinfo(message='Student record updated successfully...')
        except sqlite3.Error:
            # Display a message if no record is found for the given PantherID
            showinfo(message=f'No record was found for {pantherid}')
    else:
        # Display a message if PantherID, Name, or Email is not entered
        showinfo(message='Please enter PantherID, Name, and Email to update a record.')


# Define a function to delete a student record
def delete_record():
    pantherid = pantherid_entry.get()

    if pantherid:
        try:
            # Attempt to delete the record from the database
            cursor.execute('DELETE FROM Students WHERE PantherID=?', (pantherid,))
            conn.commit()

            # Clear the entry field
            pantherid_entry.delete(0, END)

            # Show a success message
            showinfo(message=f'Student record with PantherID {pantherid} deleted...')
        except sqlite3.Error:
            # Display a message if no record is found for the given PantherID
            showinfo(message=f'No record was found for {pantherid}')
    else:
        # Display a message if PantherID is not entered
        showinfo(message='Please enter a PantherID to delete a record')


# Define a function to export records to a CSV file
# Define a function to export records to a CSV file
def export_to_csv():
    try:
        # Retrieve all records from the 'students' table
        cursor.execute('SELECT * FROM Students')
        records = cursor.fetchall()

        # Write records to a CSV file named 'students.csv'
        with open('students.csv', 'w', newline='') as csvfile:
            csvwriter = csv.writer(csvfile)
            csvwriter.writerow(['PantherID', 'Name', 'Email'])
            for record in records:
                # Write PantherID as '="000000000"' to preserve leading zeros in Excel
                pantherid_str = f'\t{record[0]:09}'
                csvwriter.writerow([pantherid_str, record[1], record[2]])

        # Show a success message
        showinfo(message='Records exported to students.csv successfully...')
    except sqlite3.Error:
        # Display a message if an error occurs while exporting records
        showinfo(message='Error exporting records to CSV')



# Create buttons for adding, searching, updating, listing, deleting, and exporting records
button_add = Button(master=app, text='Add Student', command=on_add_student_button_clicked)
button_add.grid(row=3, column=0, padx=5, pady=5)

button_search = Button(master=app, text='Search Record', command=search_record)
button_search.grid(row=3, column=1, padx=5, pady=5)

button_update = Button(master=app, text='Update Record', command=update_record)
button_update.grid(row=3, column=2, padx=5, pady=5)

button_delete = Button(master=app, text='Delete Record', command=delete_record)
button_delete.grid(row=4, column=2, padx=5, pady=5)

button_list = Button(master=app, text='List Records', command=on_list_student_button_clicked)
button_list.grid(row=4, column=0, padx=5, pady=5)

button_export = Button(master=app, text='Export to CSV', command=export_to_csv)
button_export.grid(row=4, column=1, padx=5, pady=5)

# Run the Tkinter event loop
app.mainloop()
